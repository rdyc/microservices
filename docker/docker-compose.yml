version: '3'

services:
  # PostgreSQL
  postgres:
    image: clkao/postgres-plv8
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: P@ssw0rd!
    ports:
      - 5432:5432
    networks:
      - pg_network
    volumes:
      - ${DOCKER_VOLUMES}/postgres-plv8/data:/var/lib/postgresql/data

  # MongoDB
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: P@ssword!
    ports:
      - 27017:27017
    volumes:
      - ${DOCKER_VOLUMES}/mongo/db/:/data/db

  # Event Store DB
  eventstore:
    image: eventstore/eventstore:21.10.2-buster-slim
    container_name: eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - 1113:1113
      - 2113:2113
    volumes:
      - ${DOCKER_VOLUMES}/eventstore/data:/var/lib/eventstore
      - ${DOCKER_VOLUMES}/eventstore/logs:/var/log/eventstore
    networks:
      - esdb_network

  # Elastic
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.13.3
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - ${DOCKER_VOLUMES}/elasticsearch/data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   networks:
  #     - es_network

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.13.3
  #   container_name: kibana
  #   environment:
  #     ELASTICSEARCH_HOSTS: http://elastic_search:9200
  #   ports:
  #     - 5601:5601
  #   networks:
  #     - es_network
  #   depends_on:
  #     - elasticsearch

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - kafka_network
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes: 
      - ${DOCKER_VOLUMES}/zookeeper/data:/var/lib/zookeeper/data
      - ${DOCKER_VOLUMES}/zookeeper/log:/var/lib/zookeeper/log
  
  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    networks:
      - kafka_network
    ports:
      - 9092:9092
    environment:
      ADVERTISED_HOST_NAME: kafka
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOSTNAME: 127.0.0.1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    volumes: 
      - ${DOCKER_VOLUMES}/kafka/data:/var/lib/kafka/data
  
  kafka_init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_init
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - kafka_network
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Carts --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Orders --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Payments --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic Shipments --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  
  schema_registry:
    image: confluentinc/cp-schema-registry:7.0.1
    container_name: schema_registry
    hostname: schema_registry
    ports:
      - 8181:8181
      - 8081:8081
    depends_on:
      - zookeeper
    networks:
      - kafka_network
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      SCHEMA_TOOLS_LOG4J_LOGLEVEL: 'ERROR'

  kafka_rest:
    image: confluentinc/cp-kafka-rest:7.0.1
    container_name: kafka_rest
    hostname: kafka_rest
    ports:
      - 8082:8082
    depends_on:
      - schema_registry
    networks:
      - kafka_network
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema_registry:8081
      KAFKA_REST_HOST_NAME: kafka_rest
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082

  kafka_topics_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    hostname: kafka_ui
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - kafka_network
    depends_on:
      - kafka_rest
  
networks:
  # es_network:
  #   driver: bridge
  pg_network:
    driver: bridge
  esdb_network:
    driver: bridge
  kafka_network:
    driver: bridge